"""
Module to simulate the output of a PhotoVoltaic generator.
"""

import csv
import json
import random
import os.path
from datetime import datetime

import numpy as np
from pv_simulator.messenger_service import MessengerService


def linear_function(a, b, x):
    """
    A generic lineal function.
    a coeficient is slope.
    b is intercept.
    """
    return a*x + b

def quadratic_function(a, b, c, x):
    """
    A generic quadratic function.
    a coeficient is parabola branches amplitude.
    b is displacement of pivot point over x=y linear function.
    c is Y axis displacement.
    """
    return a*np.power(x, 2) + b*x + c

def head_curve(x):
    """First segment of curve function."""
    a = 160
    b = -880
    return linear_function(a, b, x)

def tail_curve(x):
    """Last segment of curve function."""
    a = -100
    b = 2100
    return linear_function(a, b, x)

def center_curve(x):
    """Main segment of curve function."""
    a = -82.87
    b = 2295
    c = - 12660
    return quadratic_function(a, b, c, x)

def curve(time):
    value_to_especialize = time.hour + time.minute/60
    print(value_to_especialize)
    if 5.75 < time.hour < 8:
        print("head")
        value = head_curve(value_to_especialize)
    elif 8 <= time.hour <= 20:
        print("main")
        value = center_curve(value_to_especialize)
    elif 20 < time.hour < 21:
        print("tail")
        value = tail_curve(value_to_especialize)
    elif 24 < time.hour < 0:
        raise Exception
    else:
        value = 0
    return value

class Consumer:
    """The data consumer from the meter, also outputs the data to csv."""
    def __init__(self):
        """
        Starts the PV panel queue.
        """
        self.pv_generator = PVGenerator()
        self.broker = MessengerService('meter')
        self.broker.consume_measurements(self.process_meassurement)

    def process_meassurement(self, ch, method, properties, body):
        pv_generator = PVGenerator
        value = pv_generator.get_output_power(pv_generator, body)
        print(" [x] Received %r" % body)
        print(" [x] Value in W/m2 %f" % value)

class PVGenerator:
    """Mocks the power curve generated by a PV panel."""

    def get_output_power(self, payload):
        """Returns the output power generated by PV panel at a given time"""
        message_data = json.loads(payload)
        interval_time = datetime.fromisoformat(message_data['date'])
        return curve(interval_time)

def main():
    consumer = Consumer()

if __name__ == '__main__':
    main()
