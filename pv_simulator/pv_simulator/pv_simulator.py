"""
Module to simulate the output of a PhotoVoltaic generator.
"""

import json
import numpy as np
import time
import random
from datetime import datetime
from pv_simulator.messenger_service import MessengerService


def head_curve(x):
    return 160 * x - 880

def tail_curve(x):
    return -100 * x + 2100

def center_curve(x):
    return -82.87 * np.power(x, 2) + 2295 * x - 12660

def curve(time):
    value_to_especialize = time.hour + time.minute/60
    print(value_to_especialize)
    if 5.75 < time.hour < 8:
        print("head")
        value = head_curve(value_to_especialize)
    elif 8 <= time.hour <= 20:
        print("main")
        value = center_curve(value_to_especialize)
    elif 20 < time.hour < 21:
        print("tail")
        value = tail_curve(value_to_especialize)
    elif 24 < time.hour < 0:
        raise Exception
    else:
        value = 0
    return value

class Consumer:
    """The data consumer from the meter, also outputs the data to csv."""
    def __init__(self):
        """
        Starts the PV panel queue.
        """
        self.pv_generator = PVGenerator()
        self.broker = MessengerService('meter')
        self.broker.consume_measurements(self.process_meassurement)

    def process_meassurement(self, ch, method, properties, body):
        pv_generator = PVGenerator
        value = pv_generator.get_output_power(pv_generator, body)
        print(" [x] Received %r" % body)
        print(" [x] Value in W/m2 %f" % value)

class PVGenerator:
    """Mocks the power curve generated by a PV panel."""

    def get_output_power(self, payload):
        """Returns the output power generated by PV panel at a given time"""
        message_data = json.loads(payload)
        interval_time = datetime.fromisoformat(message_data['date'])
        return curve(interval_time)

def main():
    consumer = Consumer()

if __name__ == '__main__':
    main()
